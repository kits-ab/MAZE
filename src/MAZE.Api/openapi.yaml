openapi: "3.0.3"
info:
  version: 1.0.0
  title: MAZE
  description: MAZE API
servers:
  - url: https://localhost:44396
  - url: https://maze-api.azurewebsites.net
paths:
  /game:
    post:
      operationId: createGame
      responses:
        '200':
          description: Created game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/game'

  /game/{gameId}/characters:
    get:
      operationId: getCharacters
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '200':
          description: Characters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'

  /game/{gameId}/characters/{characterId}:
    patch:
      operationId: updateCharacter
      parameters:
        - $ref: '#/components/parameters/GameId'
        - name: characterId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CharacterId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDocument'
      responses:
        '200':
          description: Updated character
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'

  /game/{gameId}/characters/mage/teleport:
    post:
      operationId: teleport
      parameters:
        - $ref: '#/components/parameters/GameId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teleport'
      responses:
        '204':
          description: Teleport successful

  /game/{gameId}/characters/warrior/smash:
    post:
      operationId: smash
      parameters:
        - $ref: '#/components/parameters/GameId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Smash'
      responses:
        '204':
          description: Smash successful

  /game/{gameId}/characters/theif/disarm:
    post:
      operationId: disarm
      parameters:
        - $ref: '#/components/parameters/GameId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Disarm'
      responses:
        '204':
          description: Disarm successful

  /game/{gameId}/characters/cleric/heal:
    post:
      operationId: heal
      parameters:
        - $ref: '#/components/parameters/GameId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Heal'
      responses:
        '204':
          description: Heal successful

  /game/{gameId}/traps:
    get:
      operationId: getTraps
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '200':
          description: Traps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trap'

  /game/{gameId}/locations:
    get:
      operationId: getLocations
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '200':
          description: Locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'

  /game/{gameId}/obstacles:
    get:
      operationId: getObstacles
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '200':
          description: Obstacles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Obstacle'

  /game/{gameId}/paths:
    get:
      operationId: getPaths
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '200':
          description: Paths
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Path'

components:
  parameters:
    GameId:
      name: gameId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/GameId'

  schemas:
    PatchDocument:
      type: array
      items:
        $ref: '#/components/schemas/PatchOperation'

    PatchOperation: 
      description: A JSONPatch operation as defined by RFC 6902 
      required:
        - op
        - path
      properties: 
        op: 
          type: string 
          description: The operation to be performed 
          enum:
           - add
           - remove
           - replace
           - move
           - copy
           - test
        path: 
          type: string 
          description: A JSON-Pointer 
        value: 
          type: object 
          description: The value to be used within the operations.
        from: 
          type: string 
          description: A string containing a JSON Pointer value.

    GameId:
      description: A game identifier
      type: string

    Game:
      properties:
        id:
          readOnly: true
          allOf:
           - $ref: '#/components/schemas/GameId'
        isPaused:
          type: boolean

    LocationId:
      description: A location identifier
      type: number

    Location:
      properties:
        id:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/LocationId'

    PathId:
      description: A path identifier
      type: number

    Path:
      properties:
        id:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/PathId'
        from:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/LocationId'
        to:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/LocationId'
        type:
          readOnly: false
          type: string
          enum:
            - West
            - East
            - North
            - South
            - Portal
            - Slope


    ObstacleId:
      description: An obstacle identifier
      type: number

    Obstacle:
      properties:
        id:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ObstacleId'
        type:
          type: string
          enum:
            - forcefield
            - lock
            - stone
            - ghost
          readOnly: true
        blockedPaths:
          description: Paths which are blocked by the obstacle
          type: array
          items:
            $ref: '#/components/schemas/PathId'
          readOnly: true

    TrapId:
      description: A trap identifier
      type: number

    Trap:
      properties:
        id:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/TrapId'
        location:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/LocationId'

    CharacterId:
      description: A character identifier
      type: string
      enum:
        - mage
        - theif
        - warrior
        - cleric

    Character:
      properties:
        id:
          readOnly: true
          allOf:
             - $ref: '#/components/schemas/CharacterId'
        startLocation:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/LocationId'
        path:
          type: array
          items:
            $ref: '#/components/schemas/PathId'
        location:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/LocationId'
        health:
          description: Number of seconds left before dying
          type: number
          format: float
          minimum: 0
          readOnly: true
        hasWeapon:
          type: boolean
          readOnly: true
        abilityCooldown:
          description: Number of seconds before ability can be used
          type: number
          format: float
          minimum: 0
          readOnly: true

    Teleport:
      properties:
        target:
          $ref: '#/components/schemas/CharacterId'
        to:
          $ref: '#/components/schemas/CharacterId'

    Smash:
      properties:
        targetLocation: 
          $ref: '#/components/schemas/LocationId'

    Disarm:
      properties:
        trap:
          $ref: '#/components/schemas/TrapId'

    Heal:
      properties:
        targets:
          type: array
          items:
            $ref: '#/components/schemas/CharacterId'