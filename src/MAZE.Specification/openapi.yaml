openapi: "3.0.3"

info:
  version: 6.1.1
  title: MAZE
  description: MAZE API

servers:
  - url: https://localhost:44396
  - url: https://maze-api.azurewebsites.net

paths:
  /games:
    post:
      operationId: createGame
      tags:
        - games
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
      responses:
        '201':
          description: Created game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '404':
          description: World not found

  /games/{gameId}/players:
    get:
      operationId: getPlayers
      tags:
        - games
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '200':
          description: Players
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'

  /games/{gameId}/characters:
    get:
      operationId: getCharacters
      tags:
        - games
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '200':
          description: Characters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
        '404':
          $ref: '#/components/responses/GameNotFound'

  /games/{gameId}/characters/{characterId}:
    parameters:
      - $ref: '#/components/parameters/GameId'
      - $ref: '#/components/parameters/CharacterId'
    get:
      operationId: getCharacter
      tags:
        - games
      responses:
        '200':
          description: Character
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '404':
          description: Resource not found
          content:
            application/json:
              examples:
                GameNotFound:
                  $ref: '#/components/examples/GameNotFound'
                CharacterNotFound:
                  $ref: '#/components/examples/CharacterNotFound'
    patch:
      operationId: updateCharacter
      tags:
        - games
      security:
        - bearerAuthentication: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDocument'
      responses:
        '200':
          description: Updated character
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '401':
          $ref: '#/components/responses/AuthorizationNeeded'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Resource not found
          content:
            application/json:
              examples:
                GameNotFound:
                  $ref: '#/components/examples/GameNotFound'
                CharacterNotFound:
                  $ref: '#/components/examples/CharacterNotFound'
                LocationNotFound:
                  $ref: '#/components/examples/LocationNotFound'

  /games/{gameId}/traps:
    get:
      operationId: getTraps
      tags:
        - games
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '200':
          description: Traps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trap'
        '404':
          $ref: '#/components/responses/GameNotFound'

  /games/{gameId}/locations:
    get:
      operationId: getLocations
      tags:
        - games
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '200':
          description: Locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        '404':
          $ref: '#/components/responses/GameNotFound'

  /games/{gameId}/obstacles:
    get:
      operationId: getObstacles
      tags:
        - games
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '200':
          description: Obstacles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Obstacle'
        '404':
          $ref: '#/components/responses/GameNotFound'

  /games/{gameId}/paths:
    get:
      operationId: getPaths
      tags:
        - games
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '200':
          description: Paths
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Path'
        '404':
          $ref: '#/components/responses/GameNotFound'

components:
  schemas:
    PatchDocument:
      type: array
      items:
        $ref: '#/components/schemas/PatchOperation'

    PatchOperation: 
      description: A JSONPatch operation as defined by RFC 6902 
      required:
        - op
        - path
      properties: 
        op: 
          type: string 
          description: The operation to be performed 
          enum:
           - add
           - remove
           - replace
           - move
           - copy
           - test
        path: 
          type: string 
          description: A JSON-Pointer 
        value: 
          oneOf:
            - type: object
            - type: number
            - type: string
            - type: boolean
            - type: integer
          nullable: true
          description: The value to be used within the operations.
        from: 
          type: string 
          description: A string containing a JSON Pointer value.

    GameId:
      description: A game identifier
      type: string

    Game:
      properties:
        id:
          readOnly: true
          allOf:
           - $ref: '#/components/schemas/GameId'
        isPaused:
          type: boolean
          default: true
        world:
          $ref: '#/components/schemas/WorldId'
      required:
        - world
        
    WorldId:
      description: A world identifier
      type: string
      pattern: '^[a-zA-Z]+$'
      example: "Castle"

    PlayerId:
      description: A player identifier
      type: number
      example: 0

    ActionName:
      description: The name of an action
      type: string
      enum:
        - moveWest
        - moveEast
        - moveNorth
        - moveSouth
        - usePortal
        - clearObstacle
        - teleport
        - disarm
        - smash
        - heal

    Player:
      properties:
        id:
          readOnly: true
          allOf:
           - $ref: '#/components/schemas/PlayerId'
        name:
          type: string
          example: "John Doe"
        actions:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ActionName'
      required:
        - id
        - name
        - actions

    LocationId:
      description: A location identifier
      type: number
      example: 0

    Location:
      properties:
        id:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/LocationId'
      required:
        - id

    PathId:
      description: A path identifier
      type: number
      example: 0

    PathType:
      description: Type of a path
      type: string
      enum:
        - west
        - east
        - north
        - south
        - portal

    Path:
      properties:
        id:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/PathId'
        from:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/LocationId'
        to:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/LocationId'
        type:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/PathType'
      required:
        - id
        - from
        - to
        - type

    ObstacleId:
      description: An obstacle identifier
      type: number
      example: 0

    Obstacle:
      properties:
        id:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ObstacleId'
        type:
          type: string
          enum:
            - forceField
            - lock
            - stone
            - ghost
          readOnly: true
        blockedPaths:
          description: Paths which are blocked by the obstacle
          type: array
          items:
            $ref: '#/components/schemas/PathId'
          readOnly: true
      required:
        - id
        - type
        - blockedPaths

    TrapId:
      description: A trap identifier
      type: number
      example: 0

    Trap:
      properties:
        id:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/TrapId'
        location:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/LocationId'
      required:
        - id
        - location

    CharacterId:
      description: A character identifier
      type: number
      example: 0

    CharacterClass:
      description: The class of a character, controls the abilities a character can use and obstacles he can clear
      type: string
      enum:
        - mage
        - rogue
        - warrior
        - cleric

    Move:
      description: Moves a character to a new location
      properties:
        actionName:
          type: string
          enum:
            - moveWest
            - moveEast
            - moveNorth
            - moveSouth
        numberOfPathsToTravel:
          description: The number of paths to travel
          type: integer
      required:
        - actionName
        - numberOfPathsToTravel

    UsePortal:
      description: Moves a character a new location through a portal
      properties:
        actionName:
          type: string
          enum:
            - usePortal
        portalPath:
          $ref: '#/components/schemas/PathId'
      required:
        - actionName
        - portalPath

    ClearObstacle:
      description: Removes an obstacle
      properties:
        actionName:
          type: string
          enum:
            - clearObstacle
        obstacle:
          $ref: '#/components/schemas/ObstacleId'
      required:
        - actionName
        - obstacle

    Teleport:
      description: Teleports a character to another character
      properties:
        actionName:
          type: string
          enum:
            - teleport
        target:
          $ref: '#/components/schemas/CharacterId'
        to:
          $ref: '#/components/schemas/CharacterId'
      required:
        - actionName
        - target
        - to

    Smash:
      description: Destroy walls, creating new paths in target direction
      properties:
        actionName:
          type: string
          enum:
            - smash
        direction: 
          type: string
          enum:
            - west
            - east
            - north
            - south
      required:
        - actionName
        - direction

    Disarm:
      description: Disarm and remove a trap
      properties:
        actionName:
            type: string
            enum:
              - disarm
        trap:
          $ref: '#/components/schemas/TrapId'
      required:
        - actionName
        - trap

    Heal:
      properties:
        actionName:
          type: string
          enum:
            - heal
        targets:
          type: array
          items:
            $ref: '#/components/schemas/CharacterId'
      required:
        - actionName
        - targets

    Character:
      properties:
        id:
          readOnly: true
          allOf:
             - $ref: '#/components/schemas/CharacterId'
        characterClass:
          readOnly: true
          allOf:
             - $ref: '#/components/schemas/CharacterClass'
        location:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/LocationId'
        availableActions:
          type: array
          readOnly: true
          items:
            oneOf:
              - $ref: '#/components/schemas/Move'
              - $ref: '#/components/schemas/UsePortal'
              - $ref: '#/components/schemas/ClearObstacle'
              - $ref: '#/components/schemas/Teleport'
              - $ref: '#/components/schemas/Smash'
              - $ref: '#/components/schemas/Disarm'
              - $ref: '#/components/schemas/Heal'
            discriminator:
              propertyName: actionName
        executedActions:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Move'
              - $ref: '#/components/schemas/UsePortal'
              - $ref: '#/components/schemas/ClearObstacle'
              - $ref: '#/components/schemas/Teleport'
              - $ref: '#/components/schemas/Smash'
              - $ref: '#/components/schemas/Disarm'
              - $ref: '#/components/schemas/Heal'
            discriminator:
              propertyName: actionName
        health:
          description: Number of seconds left before dying
          type: number
          format: float
          minimum: 0
          readOnly: true
        hasWeapon:
          type: boolean
          readOnly: true
        abilityCooldown:
          description: Number of seconds before ability can be used
          type: number
          format: float
          minimum: 0
          readOnly: true
      required:
        - id
        - characterClass
        - location
        - availableActions
        - health
        - hasWeapon
        - abilityCooldown

  parameters:
    GameId:
      name: gameId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/GameId'

    CharacterId:
      name: characterId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/CharacterId'

    ObstacleId:
      name: obstacleId      
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ObstacleId'

  securitySchemes:
    bearerAuthentication:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    GameNotFound:
      description: Game not found
      content:
        application/json:
          example:
            - $ref: '#/components/examples/GameNotFound'

    AuthorizationNeeded:
      description: You need to identify yourself

    Forbidden:
      description: You are not allowed to execute this call

  examples:
    GameNotFound:
      description: Game not found
    
    ObstacleNotFound:
      description: Obstacle not found

    LocationNotFound:
      description: Location not found

    CharacterNotFound:
      description: Character not found